README

Author: 	Jie Gao
Class:		CS 621 Network Programming
Professor:	EJ Jung

USAGE:
javac Driver.java 
java Driver
(or java -jar lab4.jar)

About Project:
In the Driver, I use 4 threads to implement multithread web cache:
thread 1: handle service announcement(UDPDiscoveryClient--serviceAnnounce)
thread 2: handle receive announcement(UDPDiscoveryServer--build the list of IPs which is running the proxy cache)
thread 3: listen request from user(check my own cache, if don't find cache, then send request to peer, if my peer don't have, then send request to dns server.).  
thread 4: listen from peer(read response from peer)A

Test broadcast(service discovery's functionality):
1.ssh to two g12 computers: g12xx,g12xy.
2.under g12xx: java Driver
3.under g12xy: java Driver
Then the output:
(under g12xx)
Known local ip is : 138.202.171.123
Received from 138.202.171.111 cs621-cache  (this is the type of service)
(under g12xy):
Known local ip is:138.202.171.111
Received from 138.202.171.123 cs621-cache

Test proxy server:
1.On the first computer: set up firefox's proxy server, Preference- Advanced-Network-Settings-Manual proxy configuration
Http Proxy: IP of current computer, Port:5678.
2. Repeat step in the second computer. 
3. On the first computer: in terminal: java Driver 
4. On the second computer: java Driver > output & 
Then: go to a website. Wait for the first computer's program's output.
Go to :http://git-scm.com/book/ch2-5.html 
or Go to : www.baidu.com
( Make sure you have NewAnnounceService.java NewAnnounceReceiver.java NewProxyServer.java NewhandlePeerResponsejava in the same directory)

For extra credit (Experiment Report)
See the experiment implementation and result in ExperimentReport.pdf. 

Requirements

1. Service Discovery - You will use multicast-based DNS Service Discovery to discover other caches on the same LAN.  When your web proxy starts, it will query for other services of the same type and maintain a local cache of other nodes providing the web cache service.  Your proxy will also advertise its own service.  You will use the service type (Links to an external site.) cs621-cache.
	1.You will follow the Exponential Back-off and Service Announcement algorithm implemented by Apple's Bonjour.  The algorithm is described here: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/NetServices/Articles/about.html (Links to an external site.)
	2.You will follow the Suppression of Duplicate Responses algorithm implemented by Apple's Bonjour, also.  This algorithm is also described here: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/NetServices/Articles/about.html (Links to an external site.)
2. Page Retrieval - If a request experiences in a cache miss, your cache will first query other caches before making a request to the source.  If content is found at a peer cache, it will be retrieved from that cache, cached locally, and returned to the browser.  The remaining design and implementation choices are up to you.  You may, for example, use either unicast or multicast to query other caches, but remember that multicast is unreliable and should not be used to fetch the actual content.
3. [Extra-credit (up to 15 points)] Micro-benchmarks - You will explore the performance of your program by timing the following relevant operations.  The results of these experiments will be documented and submitted as a PDF.  Thoroughly explain the setup of your experiments and the results you report.  Use graphs and/or tables where appropriate.
	1.time to fetch/return an object from the source.
	2.time to return an object cached locally.
	3.time to fetch/return an object from a sibling cache.


